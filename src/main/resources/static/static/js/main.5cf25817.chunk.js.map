{"version":3,"sources":["services/EmployeeService.js","Employee/UpdateBtn.jsx","Employee/ListOfEmployees.jsx","Employee/AddEmployeeBtn.jsx","Employee/SearchComponent.jsx","App.js","reportWebVitals.js","index.js"],"names":["EMPLOYEE_API_BASE_URL","getAllEmployees","a","axios","get","getEmployeeByID","employeeId","test","fulUrl","id","alert","getEmployeeByFirstName","employeeFirstName","firstName","getEmployeeByLastName","employeeLastName","lastName","employee","post","put","delete","UpdateBtn","data","handleRefreshList","useState","setId","firstname","setFirstName","lastname","setLastName","show","setShow","handleClose","isAllInputsWasFilled","className","onClick","Modal","onHide","backdrop","keyboard","Header","closeButton","Title","Body","Form","type","value","onChange","e","target","Footer","variant","preventDefault","currentEmployee","EmployeeService","updateEmployee","then","res","catch","err","handleUpdate","ListOfEmployees","specificData","refreshList","employees","setEmployees","loading","setLoading","useEffect","result","selecteType","input","hasResult","Array","handleResultLength","document","getElementById","style","display","innerText","role","scope","map","deleteEmployee","handleDelete","AddEmployeeBtn","class","addEmployee","error","handleSave","SearchComponent","searchBtn","select","setSelect","setInput","handleSelected","handleClicked","App","allEmployeesData","setSpecificData","setRefreshList","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.5cf25817.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst EMPLOYEE_API_BASE_URL =\r\n  \"https://employee-management-serverside.herokuapp.com/api/\";\r\n\r\n/**\r\n * This class connects with the spring-boot server,\r\n * with the help of the 'axios' library.\r\n */\r\n\r\nclass EmployeeService {\r\n  // GET : =======================================================\r\n  getAllEmployees = async () => {\r\n    const fullUrl = EMPLOYEE_API_BASE_URL + \"allEmployees\";\r\n    return await axios.get(fullUrl);\r\n  };\r\n\r\n  getEmployeeByID = async (employeeId) => {\r\n    // if employeeId is a number:\r\n    if (/^\\d+$/.test(employeeId)) {\r\n      const fulUrl = EMPLOYEE_API_BASE_URL + `employee/${employeeId}`;\r\n      return await axios.get(fulUrl, { id: employeeId });\r\n    } else {\r\n      alert(\"ID must be a number\");\r\n      return null;\r\n    }\r\n  };\r\n\r\n  getEmployeeByFirstName = async (employeeFirstName) => {\r\n    const fulUrl =\r\n      EMPLOYEE_API_BASE_URL + `employee/firstName/${employeeFirstName}`;\r\n    return await axios.get(fulUrl, { firstName: employeeFirstName });\r\n  };\r\n\r\n  getEmployeeByLastName = async (employeeLastName) => {\r\n    const fulUrl =\r\n      EMPLOYEE_API_BASE_URL + `employee/lastName/${employeeLastName}`;\r\n    return await axios.get(fulUrl, { lastName: employeeLastName });\r\n  };\r\n\r\n  // POST : =======================================================\r\n\r\n  addEmployee(employee) {\r\n    const fulUrl = EMPLOYEE_API_BASE_URL + \"employee\";\r\n    return axios.post(fulUrl, employee);\r\n  }\r\n\r\n  // PUT : =======================================================\r\n\r\n  updateEmployee(employee) {\r\n    const fulUrl = EMPLOYEE_API_BASE_URL + \"employee\";\r\n    return axios.put(fulUrl, employee);\r\n  }\r\n\r\n  // DELETE : =======================================================\r\n\r\n  deleteEmployee(employeeId) {\r\n    const fulUrl = EMPLOYEE_API_BASE_URL + `employee/${employeeId}`;\r\n    return axios.delete(fulUrl, { id: employeeId });\r\n  }\r\n}\r\n\r\nexport default new EmployeeService();\r\n","import React, { useState } from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport EmployeeService from \"../services/EmployeeService\";\r\n\r\nfunction UpdateBtn({ data, handleRefreshList }) {\r\n  const [id, setId] = useState(data.id);\r\n  const [firstName, setFirstName] = useState(data.firstname);\r\n  const [lastName, setLastName] = useState(data.lastname);\r\n  const [show, setShow] = useState(false);\r\n\r\n  // Shows the modal.\r\n  const handleShow = () => setShow(true);\r\n\r\n  // Closes the modal.\r\n  const handleClose = () => setShow(false);\r\n\r\n  /**\r\n   * Asks the server to update the data of current employee in the database.\r\n   * closes the modal and ask to refresh the table to see the updated data.\r\n   */\r\n  const handleUpdate = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (isAllInputsWasFilled()) {\r\n      setShow(false);\r\n      const currentEmployee = {\r\n        id,\r\n        firstname: firstName,\r\n        lastname: lastName,\r\n      };\r\n\r\n      EmployeeService.updateEmployee(currentEmployee)\r\n        .then((res) => {\r\n          handleRefreshList();\r\n        })\r\n        .catch((err) => alert(err));\r\n    }\r\n  };\r\n\r\n  // Alerts if not all the inputs were filled.\r\n  const isAllInputsWasFilled = () => {\r\n    if (id == \"\") alert(\"Please enter ID\");\r\n    else if (firstName == \"\") alert(\"Please enter first name\");\r\n    else if (lastName == \"\") alert(\"Please enter last name\");\r\n    else return true;\r\n\r\n    return false;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button className=\"btn btn-primary btn-sm\" onClick={handleShow}>\r\n        update\r\n      </button>\r\n      <Modal\r\n        show={show}\r\n        onHide={handleClose}\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Update employee</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form>\r\n            <div className=\"form-group row\">\r\n              <label className=\"col-sm-3 col-form-label\">ID</label>\r\n              <input\r\n                type=\"text\"\r\n                value={id}\r\n                className=\"form-control col-sm-6\"\r\n                onChange={(e) => setId(e.target.value)}\r\n              ></input>\r\n            </div>\r\n            <div className=\"form-group row\">\r\n              <label className=\"col-sm-3 col-form-label\">First name</label>\r\n              <input\r\n                type=\"text\"\r\n                value={firstName}\r\n                className=\"form-control col-sm-6\"\r\n                onChange={(e) => setFirstName(e.target.value)}\r\n              ></input>\r\n            </div>\r\n            <div className=\"form-group row\">\r\n              <label className=\"col-sm-3 col-form-label\">Last name</label>\r\n              <input\r\n                type=\"text\"\r\n                value={lastName}\r\n                className=\"form-control col-sm-6\"\r\n                onChange={(e) => setLastName(e.target.value)}\r\n              ></input>\r\n            </div>\r\n          </Form>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <button\r\n            className=\"btn btn-primary\"\r\n            type=\"submit\"\r\n            variant=\"primary\"\r\n            onClick={(e) => handleUpdate(e)}\r\n          >\r\n            Update\r\n          </button>\r\n\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-secondary\"\r\n            onClick={handleClose}\r\n          >\r\n            Close\r\n          </button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UpdateBtn;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport EmployeeService from \"../services/EmployeeService\";\r\nimport \"./ListOfEmployees.css\";\r\nimport UpdateBtn from \"./UpdateBtn\";\r\n\r\nfunction ListOfEmployees({ specificData, refreshList, handleRefreshList }) {\r\n  const [employees, setEmployees] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const handleResultLength = (res) => {\r\n    if (res.data instanceof Array) setEmployees(res.data);\r\n    else setEmployees([res.data]);\r\n    if (loading) setLoading(false);\r\n  };\r\n\r\n  // Asks the server to delete the current employee from the database.\r\n  const handleDelete = (e) => {\r\n    const id = e.target.id;\r\n    EmployeeService.deleteEmployee(id)\r\n      .then(() => handleRefreshList())\r\n      .catch((err) => alert(err));\r\n  };\r\n\r\n  /**\r\n   * Each time 'specificData' or 'refreshList' are changed,\r\n   * the list component is being refreshed.\r\n   */\r\n  useEffect(() => {\r\n    const selecteType = specificData.type;\r\n    const input = specificData.input;\r\n    let result;\r\n    let hasResult = true;\r\n\r\n    switch (selecteType) {\r\n      case \"allEmployees\":\r\n        result = EmployeeService.getAllEmployees();\r\n        break;\r\n      case \"id\":\r\n        result = EmployeeService.getEmployeeByID(input);\r\n        break;\r\n      case \"firstname\":\r\n        result = EmployeeService.getEmployeeByFirstName(input);\r\n        break;\r\n      case \"lastname\":\r\n        result = EmployeeService.getEmployeeByLastName(input);\r\n        break;\r\n      default:\r\n        hasResult = false;\r\n    }\r\n\r\n    if (hasResult) {\r\n      result\r\n        .then((res) => {\r\n          if (res != null) handleResultLength(res);\r\n        })\r\n        .catch((err) => {\r\n          document.getElementById(\"spinner\").style.display = \"none\";\r\n          document.getElementById(\"connect\").innerText = err;\r\n          if (!loading) setLoading(true);\r\n        });\r\n    }\r\n  }, [specificData, refreshList]);\r\n\r\n  return (\r\n    <div className=\"ListOfEmployees\">\r\n      {loading ? (\r\n        <>\r\n          <table className=\"ListOfEmployees__table \" />\r\n          <div className=\" loading\">\r\n            <div>\r\n              <div id=\"spinner\" className=\"spinner-border\" role=\"status\" />\r\n            </div>\r\n            <span id=\"connect\"> Connecting to the server...</span>\r\n          </div>\r\n        </>\r\n      ) : (\r\n        <table className=\"ListOfEmployees__table \">\r\n          <thead>\r\n            <tr>\r\n              <th scope=\"col\">ID</th>\r\n              <th scope=\"col\">FirstName</th>\r\n              <th scope=\"col\">LastName</th>\r\n              <th scope=\"col\"></th>\r\n              <th scope=\"col\"></th>\r\n            </tr>\r\n          </thead>\r\n\r\n          <tbody>\r\n            {employees.map((data) => (\r\n              <tr>\r\n                <td> {data.id}</td>\r\n                <td>{data.firstname}</td>\r\n                <td>{data.lastname}</td>\r\n                <td>\r\n                  <UpdateBtn\r\n                    key={data.id}\r\n                    data={data}\r\n                    handleRefreshList={handleRefreshList}\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <button\r\n                    className=\"btn btn-primary btn-sm\"\r\n                    key={data.id}\r\n                    id={data.id}\r\n                    onClick={(e) => handleDelete(e)}\r\n                  >\r\n                    delete\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ListOfEmployees;\r\n","import React, { useState } from \"react\";\r\nimport \"./AddEmployeeBtn.css\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport EmployeeService from \"../services/EmployeeService\";\r\n\r\nfunction AddEmployeeBtn({ handleRefreshList }) {\r\n  const [show, setShow] = useState(false);\r\n  const [id, setId] = useState(\"\");\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const [lastName, setLastName] = useState(\"\");\r\n\r\n  // Shows the modal.\r\n  const handleShow = () => setShow(true);\r\n\r\n  // Closes the modal and initializes the data.\r\n  const handleClose = () => {\r\n    setShow(false);\r\n    setId(\"\");\r\n    setFirstName(\"\");\r\n    setLastName(\"\");\r\n  };\r\n\r\n  /**\r\n   * Asks the server to add the new employee to the database.\r\n   * closes the modal and ask to refresh the table to see the updated data.\r\n   */\r\n  const handleSave = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (isAllInputsWasFilled()) {\r\n      setShow(false);\r\n      const currentEmployee = {\r\n        id,\r\n        firstname: firstName,\r\n        lastname: lastName,\r\n      };\r\n\r\n      EmployeeService.addEmployee(currentEmployee)\r\n        .then((res) => {\r\n          if (res.data == \"\") alert(\"The ID number already exists\");\r\n          else handleRefreshList();\r\n        })\r\n        .catch((error) => alert(error));\r\n    }\r\n  };\r\n\r\n  // Alerts if not all the inputs were filled.\r\n  const isAllInputsWasFilled = () => {\r\n    if (id == \"\") alert(\"Please enter ID\");\r\n    else if (firstName == \"\") alert(\"Please enter first name\");\r\n    else if (lastName == \"\") alert(\"Please enter last name\");\r\n    else return true;\r\n\r\n    return false;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button\r\n        type=\"button\"\r\n        className=\" addEmployeeBtn btn btn-info\"\r\n        onClick={handleShow}\r\n      >\r\n        Add New Employee\r\n      </button>\r\n\r\n      <Modal\r\n        show={show}\r\n        onHide={handleClose}\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Create a new Employee</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form className=\"addEmployeeBtn__form\">\r\n            <div class=\"form-group row\">\r\n              <label class=\"col-sm-3 col-form-label\">ID</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control col-sm-6 \"\r\n                onChange={(e) => setId(e.target.value)}\r\n              ></input>\r\n            </div>\r\n            <div className=\"form-group row\">\r\n              <label className=\"col-sm-3 col-form-label\">First name</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control col-sm-6\"\r\n                onChange={(e) => setFirstName(e.target.value)}\r\n              ></input>\r\n            </div>\r\n            <div className=\"form-group row\">\r\n              <label className=\"col-sm-3 col-form-label\">Last name</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control col-sm-6\"\r\n                onChange={(e) => setLastName(e.target.value)}\r\n              ></input>\r\n            </div>\r\n          </Form>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <button\r\n            type=\"submit\"\r\n            className=\"btn btn-primary\"\r\n            onClick={(e) => handleSave(e)}\r\n          >\r\n            Save\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-secondary\"\r\n            onClick={handleClose}\r\n          >\r\n            Close\r\n          </button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddEmployeeBtn;\r\n","import React, { useState } from \"react\";\r\nimport \"./SearchComponent.css\";\r\n\r\nfunction SearchComponent({ searchBtn }) {\r\n  const [select, setSelect] = useState(\"\");\r\n  const [input, setInput] = useState(\"\");\r\n\r\n  // The options: ID / First name / Last name.\r\n  const handleSelected = (e) => {\r\n    e.preventDefault();\r\n    setSelect(e.target.value);\r\n  };\r\n\r\n  // Tells the 'App.js' that the user wants to see a specific data.\r\n  const handleClicked = (e) => {\r\n    e.preventDefault();\r\n    if (select !== \"select\" && input !== \"\") searchBtn({ type: select, input });\r\n  };\r\n\r\n  return (\r\n    <form className=\"searchComponent \">\r\n      <label className=\"col-form-label\">Search By: </label>\r\n      <select class=\"form-control\" onChange={(e) => handleSelected(e)}>\r\n        <option value=\"select\">Select</option>\r\n        <option value=\"id\">ID</option>\r\n        <option value=\"firstname\"> First name</option>\r\n        <option value=\"lastname\">Last name</option>\r\n      </select>\r\n      <input\r\n        type=\"text\"\r\n        className=\"form-control\"\r\n        onChange={(e) => setInput(e.target.value)}\r\n      ></input>\r\n      <button\r\n        type=\"submit\"\r\n        className=\"btn btn-primary\"\r\n        onClick={(e) => handleClicked(e)}\r\n      >\r\n        Search\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default SearchComponent;\r\n","import \"./App.css\";\nimport ListOfEmployees from \"./Employee/ListOfEmployees\";\nimport AddEmployeeBtn from \"./Employee/AddEmployeeBtn\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport SearchComponent from \"./Employee/SearchComponent\";\nimport { useState } from \"react\";\nimport \"react-app-polyfill/stable\";\n\nfunction App() {\n  const allEmployeesData = {\n    type: \"allEmployees\",\n    input: null,\n  };\n\n  const [specificData, setSpecificData] = useState(allEmployeesData);\n\n  const [refreshList, setRefreshList] = useState(0);\n\n  /**\n   * Each time 'refreshList' is being changed, the list component is refreshed.\n   * Because of the useEffect hook.\n   */\n  const handleRefreshList = () => setRefreshList(refreshList + 1);\n\n  /**\n   * Shares with the list component which data to show:\n   * employees By:  ID / first name / last name.\n   */\n  const handleSearchBtn = (data) => {\n    setSpecificData(data);\n  };\n\n  // Tells the list component to show all the employees.\n  const handleShowAllEmployeesBtn = () => {\n    if (specificData.type !== allEmployeesData.type) {\n      setSpecificData(allEmployeesData);\n    }\n  };\n\n  return (\n    <div className=\"app\">\n      <header className=\"app__header\">Employee List</header>\n\n      <SearchComponent\n        className=\"app__search\"\n        searchBtn={handleSearchBtn}\n      ></SearchComponent>\n\n      <div className=\"app__body\">\n        <ListOfEmployees\n          specificData={specificData}\n          refreshList={refreshList}\n          handleRefreshList={handleRefreshList}\n        ></ListOfEmployees>\n\n        <div className=\"app__body__btns\">\n          <AddEmployeeBtn\n            className=\"app__addEmployeeBtn\"\n            handleRefreshList={handleRefreshList}\n          />\n\n          <button className=\"btn btn-info\" onClick={handleShowAllEmployeesBtn}>\n            Show All Employees\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}